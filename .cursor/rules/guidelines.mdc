# OpenAPI 开发规范

## 📁 文件结构规范

### 目录结构
- `openapi-core/` - OpenAPI 规范根目录
  - `openapi.yaml` - 主规范文件
  - `paths/` - API 路径定义，按功能模块组织
  - `components/` - 可复用组件
    - `schemas/` - 数据模型定义
    - `responses/` - 响应模型定义
    - `headers/` - 响应头定义

### 文件命名规范
- **路径文件**：下划线分隔，反映URL结构，如 `api_v1_auth_login.yaml`
- **组件文件**：PascalCase，如 `UserApiResponse.yaml`
- **统一使用**：`.yaml` 扩展名

## 🚀 API 规范编写规则

### 必填字段
每个API端点必须包含：
- `operationId` - 唯一操作标识符，使用camelCase
- `tags` - 中文标签分类
- `summary` - 中文操作摘要
- `description` - 中文详细描述
- `security` - 安全配置（认证接口使用 `security: []`）
- `responses` - 响应定义

### operationId 命名约定
- **CRUD操作**：`create{Resource}`, `list{Resources}`, `get{Resource}`, `update{Resource}`, `delete{Resource}`
- **认证相关**：`login`, `logout`, `refreshToken`, `register`, `changePassword`
- **特殊操作**：`activate{Resource}`, `export{Resources}`, `check{Resource}Deletable`

### 响应格式规范
**统一响应设计原则**：
- HTTP状态码固定为200
- 通过 `code` 字段区分状态：`code = 0` 成功，`code != 0` 失败
- `data` 字段：成功时包含业务数据，失败时为 `null`

**响应schema选择**：
```yaml
responses:
  '200':
    description: 接口响应
    content:
      application/json:
        schema:
          # 认证相关API（登录、注册等）
          $ref: '../components/schemas/AuthApiResponse.yaml'
          # 用户信息相关API
          $ref: '../components/schemas/UserApiResponse.yaml'  
          # 简单操作（登出、修改密码等）
          $ref: '../components/schemas/SimpleApiResponse.yaml'
```

**discriminator工作原理**：
基于 `code` 字段值确定具体响应schema：
- `code = 0` 时使用成功响应schema
- `code != 0` 时使用 `ErrorResponse.yaml`

**错误码约定**：
- `0` - 成功
- `40001-49999` - 客户端错误
- `50001-59999` - 服务端错误
- `40101` - 认证失败
- `40001` - 参数验证失败

### 安全配置
- **需要认证**：`security: - BearerAuth: []`
- **不需要认证**：`security: []`（登录、注册等）

### 参数定义规范
**分页参数**：
- `page` - 页码，从1开始，默认1
- `page_size` - 每页数量，默认10，最大100
- `total` - 是否返回总数，布尔值，默认false

**路径参数**：
- 必须设置 `required: true`
- ID参数：`type: string, maxLength: 26, minLength: 1`

## 🔧 质量要求

### Lint检查
使用Redocly CLI进行验证：
```bash
npm run test    # 运行lint检查
npm start       # 本地预览
npm run build:core  # 构建文档
```

### 必须通过
- 0个 `error` 级别问题
- 0个 `warning` 级别问题
- 所有 `$ref` 引用路径正确
- 所有 `operationId` 全局唯一

## 📝 开发流程

### 新增API步骤
1. 在 `paths/` 目录创建路径文件
2. 定义必要的输入输出模型
3. 在主规范文件中添加路径引用
4. 运行 `npm run test` 检查
5. 运行 `npm start` 验证文档

### 提交前检查
- [ ] 所有必填字段已定义
- [ ] 响应格式符合统一规范
- [ ] 安全配置正确
- [ ] 通过所有lint检查
- [ ] 文档生成正常 