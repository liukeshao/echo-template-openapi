---
alwaysApply: false
---
# Echo Template API 规范开发规则

## 文件结构规范

### 目录结构
- `openapi/` - OpenAPI 规范根目录
  - `openapi.yaml` - 主规范文件
  - `paths/` - API 路径定义文件
  - `components/` - 可复用组件
    - `schemas/` - 数据模型定义
    - `responses/` - 响应模型定义
    - `headers/` - 响应头定义

### 文件命名规范
- 路径文件：使用下划线分隔，如 `api_v1_admin_users.yaml`
- 组件文件：使用 PascalCase，如 `UserOutput.yaml`
- 所有文件使用 `.yaml` 扩展名

## API 规范编写规则

### 必填字段要求
**每个 API 端点必须包含：**
- `operationId` - 唯一的操作标识符，使用 camelCase
- `tags` - 标签分类，必须使用中文标签
- `summary` - 操作摘要，使用中文描述
- `description` - 详细描述，使用中文说明
- `security` - 安全配置（认证接口除外使用 `security: []`）
- `responses` - 响应定义，至少包含 `200` 状态码

### operationId 命名约定
- 遵循 RESTful 语义：
  - `create{Resource}` - 创建资源
  - `list{Resources}` - 列表查询
  - `get{Resource}` - 获取单个资源
  - `update{Resource}` - 更新资源
  - `delete{Resource}` - 删除资源
- 特殊操作使用动词+名词：
  - `move{Resource}` - 移动资源
  - `sort{Resources}` - 排序资源
  - `check{Resource}Deletable` - 检查是否可删除
- 示例：`createUser`, `listUsers`, `getUser`, `updateUser`, `deleteUser`

### 标签规范
使用中文标签，与主规范文件中的 tags 保持一致：
- 认证管理
- 当前用户

### 安全配置
- 需要认证的接口：`security: - BearerAuth: []`
- 不需要认证的接口：`security: []`
- 登录、注册等认证接口使用 `security: []`

### 响应格式规范
所有 API 响应必须遵循统一格式：
```yaml
responses:
  '200':
    description: 操作描述
    content:
      application/json:
        schema:
          # 使用预定义的响应模型
          $ref: '../components/schemas/SimpleApiResponse.yaml'
          # 认证API使用
          $ref: '../components/schemas/AuthApiResponse.yaml'
          # 用户信息API使用
          $ref: '../components/schemas/UserApiResponse.yaml'
```

### 参数定义规范
**路径参数：**
- 必须设置 `required: true`
- 提供 `description` 说明
- 指定合适的 `schema` 类型
- ID 参数使用 `type: string, maxLength: 26`

**查询参数：**
- 分页参数：`page`（页码，从1开始）、`page_size`（每页数量）
- 筛选参数：`status`、`keyword` 等
- 使用 `enum` 限制可选值
- 提供 `default` 默认值

### 请求体规范
- 使用 `$ref` 引用预定义的输入模型
- 提供 `examples` 示例数据
- 设置 `required: true` 对于必需的请求体

### 数据模型规范
**输入模型命名：**
- 创建：`Create{Resource}Input.yaml`
- 更新：`Update{Resource}Input.yaml`
- 查询：`List{Resources}Input.yaml`
- 特殊操作：`{Action}{Resource}Input.yaml`

**输出模型命名：**
- 单个资源：`{Resource}Output.yaml`
- 列表输出：`List{Resources}Output.yaml`
- 统计信息：`{Resource}StatsOutput.yaml`
- 树形结构：`{Resource}TreeOutput.yaml`

### 错误处理
- 统一使用 HTTP 200 状态码
- 通过 `code` 字段区分成功失败
- 提供 `examples` 展示成功和失败情况

## 代码质量要求

### Lint 规则
使用 Redocly 进行规范验证：
```bash
npm run test  # 运行 lint 检查
```

### 必须通过的检查
- 无 `error` 级别问题
- 无 `warning` 级别问题
- 所有 `$ref` 引用必须存在
- 所有 `operationId` 必须唯一
- 所有必填字段必须定义

### 文档生成
- 使用 `npm run start` 本地预览
- 使用 `npm run build` 生成静态文档
- 确保生成的文档完整可用

## 开发流程

### 新增 API 步骤
1. 在 `paths/` 目录创建路径文件
2. 定义必要的输入输出模型
3. 在主规范文件中添加路径引用
4. 运行 lint 检查确保无误
5. 生成文档验证效果

### 修改现有 API
1. 更新相应的路径文件或模型文件
2. 确保向后兼容性
3. 更新相关的示例数据
4. 运行 lint 检查
5. 更新文档

### 提交前检查
- [ ] 所有 API 端点有 operationId
- [ ] 所有必填字段已定义
- [ ] 响应格式符合规范
- [ ] 安全配置正确
- [ ] 通过 lint 检查
- [ ] 文档生成正常

## 最佳实践

### 描述编写
- 使用中文描述，简洁明了
- 说明接口的用途和使用场景
- 提供必要的业务逻辑说明

### 示例数据
- 提供真实可用的示例数据
- 包含成功和失败的响应示例
- 使用有意义的示例值

### 版本控制
- 通过版本号管理 API 变更
- 重大变更时更新版本号
- 保持向后兼容性

### 性能考虑
- 合理设计分页参数
- 避免返回过多数据
- 使用适当的缓存策略

## 常见问题解决

### operationId 重复
确保每个 API 端点的 operationId 唯一，使用描述性的命名。

### 引用路径错误
检查 $ref 路径的正确性，确保相对路径正确。

### 响应格式不一致
统一使用预定义的响应模型，确保格式一致性。

### 安全配置缺失
为需要认证的接口添加 security 配置。 