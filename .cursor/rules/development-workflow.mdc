---
description: 
globs: 
alwaysApply: false
---
# 开发工作流程

本指南描述了如何在这个 OpenAPI 模板项目中进行开发工作。

## 🚀 快速开始

### 1. 环境设置
```bash
# 安装依赖
npm install

# 启动文档预览（默认端口 8080）
npm start

# 验证 OpenAPI 规范
npm test
```

### 2. 开发流程
1. **编辑 OpenAPI 文件** - 修改 [openapi/](mdc:openapi) 目录下的文件
2. **实时预览** - 使用 `npm start` 查看文档变化
3. **验证规范** - 使用 `npm test` 确保语法正确
4. **构建发布** - 使用 `npm run build` 生成最终文档

## ➕ 添加新的 API 端点

### 步骤 1: 创建路径文件
在 `openapi/paths/` 目录下创建新文件，命名规则：
- URL: `/api/v1/products/{id}` → 文件名: `api_v1_products_{id}.yaml`

### 步骤 2: 定义 API 操作
```yaml
get:
  tags:
    - 产品管理
  summary: 获取产品详情
  operationId: getProduct
  parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
  responses:
    '200':
      description: 成功获取产品信息
      content:
        application/json:
          schema:
            $ref: ../components/schemas/ProductResponse.yaml
```

### 步骤 3: 在主文件中引用
在 [openapi.yaml](mdc:openapi/openapi.yaml) 的 `paths` 部分添加：
```yaml
/api/v1/products/{id}:
  $ref: paths/api_v1_products_{id}.yaml
```

## 📊 添加数据模型

### 步骤 1: 创建 Schema 文件
在 `openapi/components/schemas/` 目录下创建，如 `Product.yaml`：
```yaml
type: object
properties:
  id:
    type: string
    description: 产品唯一标识
  name:
    type: string
    description: 产品名称
  price:
    type: number
    format: double
    description: 产品价格
required:
  - id
  - name
  - price
```

### 步骤 2: 在主文件中注册
在 [openapi.yaml](mdc:openapi/openapi.yaml) 的 `components.schemas` 部分添加：
```yaml
Product:
  $ref: components/schemas/Product.yaml
```

## 🔍 验证和调试

### 使用 Redocly CLI
```bash
# 详细的验证报告
npx redocly lint openapi/openapi.yaml

# 检查特定文件
npx redocly lint openapi/paths/api_v1_auth_login.yaml

# 生成静态文档
npx redocly build-docs openapi/openapi.yaml --output docs/
```

### 常见问题排查
1. **引用路径错误** - 检查 `$ref` 路径是否正确
2. **循环引用** - 避免 Schema 之间的循环依赖
3. **语法错误** - 使用 `npm test` 进行验证

## 📚 代码示例管理

### 添加代码示例
在 `openapi/code_samples/` 目录下按语言组织：
- 可添加其他语言目录

### 示例文件结构
```
code_samples/
├── JavaScript/
│   └── auth/
│       └── login.js
└── Python/
    └── auth/
        └── login.py
```

## 🏷️ 版本管理建议
- 在 [openapi.yaml](mdc:openapi/openapi.yaml) 中维护版本号
- 重大变更时创建新的版本分支
- 使用 Git 标签标记发布版本
