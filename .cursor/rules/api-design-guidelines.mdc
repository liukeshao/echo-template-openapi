---
description: 
globs: 
alwaysApply: false
---
# API 设计指南

本项目遵循统一的 API 设计规范，确保接口的一致性和可维护性。

## 🎯 设计原则

### 统一响应格式
所有 API 响应都使用标准格式，参考 [Response.yaml](mdc:openapi/components/schemas/Response.yaml)：

```yaml
type: object
properties:
  code:
    type: integer
    description: 响应代码，0表示成功，非0表示失败
  message:
    type: string
    description: 响应消息
  data:
    description: 响应数据，根据具体接口而定
```

### HTTP 状态码规范
- **统一使用 200** - 所有响应都返回 HTTP 200
- **通过 `code` 字段区分** - 业务成功/失败通过响应体中的 `code` 字段判断

## 🔐 认证设计

### JWT Bearer Token
使用 JWT 进行 API 认证，配置在 [openapi.yaml](mdc:openapi/openapi.yaml) 中：

```yaml
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
```

### 认证流程
1. **注册/登录** - 获取 access_token 和 refresh_token
2. **API 调用** - 在请求头中携带 `Authorization: Bearer <token>`
3. **令牌刷新** - 使用 refresh_token 获取新的 access_token

参考实现：
- [注册接口](mdc:openapi/paths/api_v1_auth_register.yaml)
- [登录接口](mdc:openapi/paths/api_v1_auth_login.yaml)
- [刷新接口](mdc:openapi/paths/api_v1_auth_refresh.yaml)

## 📋 数据模型设计

### 输入验证
所有输入模型都应包含适当的验证规则：

```yaml
# 示例：用户注册输入
type: object
properties:
  username:
    type: string
    minLength: 3
    maxLength: 50
    pattern: '^[a-zA-Z0-9_]+$'
  email:
    type: string
    format: email
  password:
    type: string
    minLength: 8
required:
  - username
  - email
  - password
```

### 分页设计
使用统一的分页模式，参考 [PageInput.yaml](mdc:openapi/components/schemas/PageInput.yaml) 和 [PageOutput.yaml](mdc:openapi/components/schemas/PageOutput.yaml)：

```yaml
# 分页输入
page:
  type: integer
  minimum: 1
  default: 1
page_size:
  type: integer
  minimum: 1
  maximum: 100
  default: 10

# 分页输出
total:
  type: integer
  description: 总记录数
page:
  type: integer
  description: 当前页码
page_size:
  type: integer
  description: 每页记录数
```

## 🏷️ 标签和分组

### 功能模块标签
在 [openapi.yaml](mdc:openapi/openapi.yaml) 中定义：

```yaml
tags:
  - name: 认证管理
    description: 用户注册、登录、令牌管理等认证相关接口
  - name: 用户管理
    description: 用户信息查询和管理接口

x-tagGroups:
  - name: 核心功能
    tags:
      - 认证管理
      - 用户管理
```

### 操作 ID 命名
使用有意义的 `operationId`：
- `registerUser` - 用户注册
- `loginUser` - 用户登录
- `getUserProfile` - 获取用户信息
- `updateUserProfile` - 更新用户信息

## 📖 文档编写规范

### 接口描述
- **summary**: 简短的功能描述（1-2 个词）
- **description**: 详细的功能说明，支持 Markdown
- **tags**: 归属的功能模块

### 参数说明
- 为每个参数提供清晰的 `description`
- 使用合适的数据类型和格式
- 标明必需和可选参数

### 响应示例
为重要接口提供完整的响应示例：

```yaml
responses:
  '200':
    description: 登录成功
    content:
      application/json:
        schema:
          $ref: ../components/schemas/AuthResponse.yaml
        example:
          code: 0
          message: "登录成功"
          data:
            access_token: "eyJhbGciOiJIUzI1NiIs..."
            refresh_token: "eyJhbGciOiJIUzI1NiIs..."
            expires_in: 3600
```

## ⚠️ 错误处理

### 错误响应格式
统一的错误响应结构：

```yaml
code: 1001
message: "用户名已存在"
data: null
```

### 常见错误码设计
- **1xxx** - 认证相关错误
- **2xxx** - 参数验证错误  
- **3xxx** - 业务逻辑错误
- **9xxx** - 系统内部错误

## 🔄 版本控制
- 在 URL 中包含版本号：`/api/v1/`
- 主版本号变更时创建新的路径组
- 向后兼容的变更在同一版本内进行
